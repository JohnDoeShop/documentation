{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to John Doe Shop\n\n\nThis is the official John Doe Shop documentation for web agencies and stores using our platform.\n\n\nIf you want to make some changes send a pull request to \nthis repository\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-john-doe-shop", 
            "text": "This is the official John Doe Shop documentation for web agencies and stores using our platform.  If you want to make some changes send a pull request to  this repository .", 
            "title": "Welcome to John Doe Shop"
        }, 
        {
            "location": "/liquid/introduction/", 
            "text": "Basics\n\n\nThis is an introduction to Liquid. You can find the original \nhere\n\n\nIntroduction\n\n\nWe choose to use Liquid as our default template engine to be as compatible as possible with Shopify's syntax.\nMany of you already used Shopify to design a frontend so we tried to be consistent with their variables, objects and filters so you don't need to learn a completely new syntax.\n\n\nLiquid uses a combination of tags, objects, and filters to load dynamic content. They are used inside Liquid template files, which are a group of files that make up a theme. \n\n\nTags\n\n\nTags make up the programming logic that tells templates what to do. \n\n\n{% if user.name == 'John Doe' %}\n  Hey John!\n{% endif %}\n\n\n\n\nObjects\n\n\nObjects contain attributes that are used to display dynamic content on the page. \n\n\n{{ product.title }} \n!-- Output: Awesome T-Shirt--\n\n\n\n\n\nFilters\n\n\nFilters are used to modify the output of strings, numbers, variables, and objects. \n\n\n{{ 'sales' | append: '.jpg' }} \n!-- Output: sales.jpg --\n\n\n\n\n\nOperators\n\n\nLiquid has access to all of the logical and comparison operators. These can be used in tags such as if and unless. \n\n\nBasic Operators\n\n\n\n\n\n\n\n\nOperator\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n==\n\n\nequals\n\n\n\n\n\n\n!=\n\n\ndoes not equal\n\n\n\n\n\n\n\n\ngreater than\n\n\n\n\n\n\n\n\nless than\n\n\n\n\n\n\n=\n\n\ngreater than or equal\n\n\n\n\n\n\n\n\nless than or equal\n\n\n\n\n\n\nand\n\n\nA and B\n\n\n\n\n\n\nor\n\n\nA or B\n\n\n\n\n\n\n\n\nExamples\n\n\n{% if product.title == \nAwesome Shoes\n %}\n    These shoes are awesome!\n{% endif %}\n\n\n\n\nOperators can be chained together. \n\n\n{% if product.type == \nShirt\n or product.type == \nShoes\n %}\n    This is a shirt or a shoe. \n{% endif %}\n\n\n\n\nContains\n\n\ncontains\n checks for the presence of a substring inside a string. \n\n\n{% if product.title contains 'Pack' %}\n  This product's title contains the word Pack.\n{% endif %}\n\n\n\n\ncontains\n can also check for the presence of a string in an array of strings.\n\n\n{% if product.tags contains 'Hello' %}\n  This product has been tagged with 'Hello'.\n{% endif %}\n\n\n\n\nYou cannot check for the presence of an object in an array of objects using contains. This will not work:\n\n\n{% if product.category contains 'T-Shirts' %}\n  This product belongs to the T-shirts category.\n{% endif %}\n\n\n\n\nTypes\n\n\nLiquid objects can return one of five types: String, Number, Boolean, Nil or Array. Liquid variables can be initialized by using the assign or capture tags. \n\n\nStrings\n\n\nStrings are declared by wrapping the variable's value in single or double quotes. \n\n\n{% assign my_string = \nGood Morning\n %}\n\n\n\n\nNumberical\n\n\nNumbers include floats and integers. \n\n\n{% assign my_num = 25 %}\n\n\n\n\nBooleans\n\n\nBooleans are either true or false. No quotations are necessary when declaring a boolean.\n\n\n{% assign foo = true %}\n{% assign bar = false %}\n\n\n\n\nNil\n\n\nnil\n is an empty value that is returned when Liquid code has no results. It is not a string with the characters \"nil\".\n\n\nnil\n is treated as false in the conditions of \n{% if %}\n blocks and other Liquid tags that check for the truthfulness of a statement. The example below shows a situation where a fulfillment does not yet have a tracking number entered. The if statement would not render the included text within it. \n\n\n{% if fulfillment.tracking_numbers %}\nWe have a tracking number!\n{% endif %}\n\n\n\n\nAny tags or outputs that return nil will not show anything on the screen. \n\n\nArrays\n\n\nArrays hold a list of variables of all types. \n\n\nAccessing all items in an array\n\n\nTo access items in an array, you can loop through each item in the array using a for tag or a tablerow tag. \n\n\n!-- if product.tags = \nsale\n, \nsummer\n, \nspring\n, \nwholesale\n --\n\n{% for tag in product.tags %}\n    {{ tag }}\n{% endfor %}\n\n\n\n\nAccessing a specific item in an array\n\n\nYou can use square brackets ( [ ] ) notation to access a specific item in an array. Array indexing starts at zero. \n\n\n!-- if product.tags = \nsale\n, \nsummer\n, \nspring\n, \nwholesale\n --\n\n{{ product.tags[0] }} \n{{ product.tags[1] }} \n{{ product.tags[2] }} \n{{ product.tags[3] }}\n\n\n\n\nInitializing an array\n\n\nIt is not possible to initialize an array in Liquid. For example, in Javascript you could do something like this: \n\n\nscript\n\nvar songs = [\nLost in the World\n, \nMercy\n, \nGold Digger\n, \nRunaway\n];\n\n/script\n\n\n\n\n\nIn Liquid, you must instead use the split filter to break a single string into an array of substrings. See split for examples. \n\n\nTruthy and Falsy\n\n\nWhat is liquid?\n\n\nIn programming, we describe \u201ctruthy\u201d and \u201cfalsy\u201d as anything that returns true or false, respectively, when used inside an if statement. \n\n\nWhat is true?\n\n\nAll values in Liquid are truthy, with the exception of nil and false.\n\n\nIn the example below, the text \u201cJohn Doe\u201d is not a boolean, but it is truthy in a conditional: \n\n\n{% assign john_doe = 'John Doe' %}\n{% if john_doe %}\nThis will always be true.\n{% endif %}\n\n\n\n\nStrings, even when empty, are truthy. The example below will result in empty HTML tags if \nsettings.body_background\n is defined but empty: \n\n\n{% if settings.body_background %}\n\nh1\n{{ settings.body_background }}\n/h1\n\n{% endif %}\n\n!-- Output: \nh1\n/h1\n --\n\n\n\n\n\nWhat is false?\n\n\nThe only values that are falsy in Liquid are nil and false.\n\n\nnil\n is returned when a Liquid object doesn't have anything to return. For example, if a category doesn't have an image, category.image will be set to nil. Since that is falsy, you can do this: \n\n\n{% if category.image %}\n\n!-- Output: //az763220.vo.msecnd.net/... (category image if present) --\n\n{% endif %}\n\n\n\n\nThe value false is returned through many Liquid object properties such as \nproduct.available\n, and others.", 
            "title": "Introduction"
        }, 
        {
            "location": "/liquid/introduction/#basics", 
            "text": "This is an introduction to Liquid. You can find the original  here", 
            "title": "Basics"
        }, 
        {
            "location": "/liquid/introduction/#introduction", 
            "text": "We choose to use Liquid as our default template engine to be as compatible as possible with Shopify's syntax.\nMany of you already used Shopify to design a frontend so we tried to be consistent with their variables, objects and filters so you don't need to learn a completely new syntax.  Liquid uses a combination of tags, objects, and filters to load dynamic content. They are used inside Liquid template files, which are a group of files that make up a theme.   Tags  Tags make up the programming logic that tells templates what to do.   {% if user.name == 'John Doe' %}\n  Hey John!\n{% endif %}  Objects  Objects contain attributes that are used to display dynamic content on the page.   {{ product.title }}  !-- Output: Awesome T-Shirt--   Filters  Filters are used to modify the output of strings, numbers, variables, and objects.   {{ 'sales' | append: '.jpg' }}  !-- Output: sales.jpg --", 
            "title": "Introduction"
        }, 
        {
            "location": "/liquid/introduction/#operators", 
            "text": "Liquid has access to all of the logical and comparison operators. These can be used in tags such as if and unless.   Basic Operators     Operator  Meaning      ==  equals    !=  does not equal     greater than     less than    =  greater than or equal     less than or equal    and  A and B    or  A or B     Examples  {% if product.title ==  Awesome Shoes  %}\n    These shoes are awesome!\n{% endif %}  Operators can be chained together.   {% if product.type ==  Shirt  or product.type ==  Shoes  %}\n    This is a shirt or a shoe. \n{% endif %}  Contains  contains  checks for the presence of a substring inside a string.   {% if product.title contains 'Pack' %}\n  This product's title contains the word Pack.\n{% endif %}  contains  can also check for the presence of a string in an array of strings.  {% if product.tags contains 'Hello' %}\n  This product has been tagged with 'Hello'.\n{% endif %}  You cannot check for the presence of an object in an array of objects using contains. This will not work:  {% if product.category contains 'T-Shirts' %}\n  This product belongs to the T-shirts category.\n{% endif %}", 
            "title": "Operators"
        }, 
        {
            "location": "/liquid/introduction/#types", 
            "text": "Liquid objects can return one of five types: String, Number, Boolean, Nil or Array. Liquid variables can be initialized by using the assign or capture tags.   Strings  Strings are declared by wrapping the variable's value in single or double quotes.   {% assign my_string =  Good Morning  %}  Numberical  Numbers include floats and integers.   {% assign my_num = 25 %}  Booleans  Booleans are either true or false. No quotations are necessary when declaring a boolean.  {% assign foo = true %}\n{% assign bar = false %}  Nil  nil  is an empty value that is returned when Liquid code has no results. It is not a string with the characters \"nil\".  nil  is treated as false in the conditions of  {% if %}  blocks and other Liquid tags that check for the truthfulness of a statement. The example below shows a situation where a fulfillment does not yet have a tracking number entered. The if statement would not render the included text within it.   {% if fulfillment.tracking_numbers %}\nWe have a tracking number!\n{% endif %}  Any tags or outputs that return nil will not show anything on the screen.   Arrays  Arrays hold a list of variables of all types.   Accessing all items in an array  To access items in an array, you can loop through each item in the array using a for tag or a tablerow tag.   !-- if product.tags =  sale ,  summer ,  spring ,  wholesale  -- \n{% for tag in product.tags %}\n    {{ tag }}\n{% endfor %}  Accessing a specific item in an array  You can use square brackets ( [ ] ) notation to access a specific item in an array. Array indexing starts at zero.   !-- if product.tags =  sale ,  summer ,  spring ,  wholesale  -- \n{{ product.tags[0] }} \n{{ product.tags[1] }} \n{{ product.tags[2] }} \n{{ product.tags[3] }}  Initializing an array  It is not possible to initialize an array in Liquid. For example, in Javascript you could do something like this:   script \nvar songs = [ Lost in the World ,  Mercy ,  Gold Digger ,  Runaway ]; /script   In Liquid, you must instead use the split filter to break a single string into an array of substrings. See split for examples.", 
            "title": "Types"
        }, 
        {
            "location": "/liquid/introduction/#truthy-and-falsy", 
            "text": "", 
            "title": "Truthy and Falsy"
        }, 
        {
            "location": "/liquid/introduction/#what-is-liquid", 
            "text": "In programming, we describe \u201ctruthy\u201d and \u201cfalsy\u201d as anything that returns true or false, respectively, when used inside an if statement.", 
            "title": "What is liquid?"
        }, 
        {
            "location": "/liquid/introduction/#what-is-true", 
            "text": "All values in Liquid are truthy, with the exception of nil and false.  In the example below, the text \u201cJohn Doe\u201d is not a boolean, but it is truthy in a conditional:   {% assign john_doe = 'John Doe' %}\n{% if john_doe %}\nThis will always be true.\n{% endif %}  Strings, even when empty, are truthy. The example below will result in empty HTML tags if  settings.body_background  is defined but empty:   {% if settings.body_background %} h1 {{ settings.body_background }} /h1 \n{% endif %} !-- Output:  h1 /h1  --", 
            "title": "What is true?"
        }, 
        {
            "location": "/liquid/introduction/#what-is-false", 
            "text": "The only values that are falsy in Liquid are nil and false.  nil  is returned when a Liquid object doesn't have anything to return. For example, if a category doesn't have an image, category.image will be set to nil. Since that is falsy, you can do this:   {% if category.image %} !-- Output: //az763220.vo.msecnd.net/... (category image if present) -- \n{% endif %}  The value false is returned through many Liquid object properties such as  product.available , and others.", 
            "title": "What is false?"
        }, 
        {
            "location": "/liquid/shop/", 
            "text": "shop.name\n\n\nReturns the shop's name.\n\n\nshop.decription\n\n\nReturn the shop's description.\n\n\nshop.currency\n\n\nReturns the shop's default three-letter ISO 4217 currency code (ex: USD).", 
            "title": "Shop"
        }, 
        {
            "location": "/liquid/shop/#shopname", 
            "text": "Returns the shop's name.", 
            "title": "shop.name"
        }, 
        {
            "location": "/liquid/shop/#shopdecription", 
            "text": "Return the shop's description.", 
            "title": "shop.decription"
        }, 
        {
            "location": "/liquid/shop/#shopcurrency", 
            "text": "Returns the shop's default three-letter ISO 4217 currency code (ex: USD).", 
            "title": "shop.currency"
        }, 
        {
            "location": "/liquid/category/", 
            "text": "category.name\n\n\ncategory.title\n\n\ncategory.friendly_name\n\n\ncategory.handle", 
            "title": "Category"
        }, 
        {
            "location": "/liquid/category/#categoryname", 
            "text": "", 
            "title": "category.name"
        }, 
        {
            "location": "/liquid/category/#categorytitle", 
            "text": "", 
            "title": "category.title"
        }, 
        {
            "location": "/liquid/category/#categoryfriendly_name", 
            "text": "", 
            "title": "category.friendly_name"
        }, 
        {
            "location": "/liquid/category/#categoryhandle", 
            "text": "", 
            "title": "category.handle"
        }, 
        {
            "location": "/liquid/machine-learning/", 
            "text": "", 
            "title": "Machine Learning"
        }, 
        {
            "location": "/endpoints/cart/", 
            "text": "", 
            "title": "Cart"
        }
    ]
}